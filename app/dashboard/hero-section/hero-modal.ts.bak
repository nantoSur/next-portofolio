"use client";

import {
    Dialog,
    DialogContent,
    DialogHeader,
    DialogTitle,
    DialogFooter,
} from "@/components/ui/dashboard/dialog";
import { Button } from "@/components/ui/dashboard/button";
import { Input } from "@/components/ui/dashboard/input";
import { Textarea } from "@/components/ui/dashboard/textarea";
import { useEffect, useState } from "react";
import { toast } from "sonner";
import { z } from "zod";
import { HeroSectionSchema } from "@/lib/validations/hero-section-schema";
// import {
//     createHeroSection,
//     updateHeroSection,
// } from "@/lib/actions/hero-section";

export type HeroForm = z.infer<typeof HeroSectionSchema> & { id?: string };

type Props = {
    open: boolean;
    onClose: () => void;
    onSuccess: () => void;
    initialData?: HeroForm | null;
};

export function HeroModal({ open, onClose, onSuccess, initialData }: Props) {
    const [form, setForm] = useState<HeroForm>({
        title: "",
        highlight: "",
        subtitle: "",
        description: "",
    });

    useEffect(() => {
        if (initialData) {
            setForm(initialData);
        }
    }, [initialData]);

    const handleChange = (
        e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
    ) => {
        setForm((prev) => ({ ...prev, [e.target.name]: e.target.value }));
    };

    const handleSubmit = async () => {
        const result = HeroSectionSchema.safeParse(form);
        if (!result.success) {
            toast.error("Data tidak valid");
            return;
        }

        try {
            if (form.id) {
                // await updateHeroSection(form.id, form);
                toast.success("Hero Section berhasil diperbarui");
            } else {
                // await createHeroSection(form);
                toast.success("Hero Section berhasil ditambahkan");
            }

            onSuccess();
        } catch (error) {
            console.error(error);
            toast.error("Gagal menyimpan hero section");
        }
    };

    return (
        <Dialog open= { open } onOpenChange = { onClose } >
            <DialogContent>
            <DialogHeader>
            <DialogTitle>
            { form.id ? "Edit Hero Section" : "Tambah Hero Section" }
            </DialogTitle>
            </DialogHeader>

            < div className = "space-y-4" >
                <Input
            name="title"
    placeholder = "Judul"
    value = { form.title }
    onChange = { handleChange }
        />
        <Input
            name="highlight"
    placeholder = "Highlight"
    value = { form.highlight }
    onChange = { handleChange }
        />
        <Input
            name="subtitle"
    placeholder = "Subjudul"
    value = { form.subtitle }
    onChange = { handleChange }
        />
        <Textarea
            name="description"
    placeholder = "Deskripsi"
    value = { form.description }
    onChange = { handleChange }
        />
        </div>

        < DialogFooter className = "mt-4" >
            <Button variant="outline" onClick = { onClose } >
                Batal
                </Button>
                < Button onClick = { handleSubmit } > Simpan </Button>
                    </DialogFooter>
                    </DialogContent>
                    </Dialog>
  );
}
