// app/api/login/route.ts
import { sql } from "@/lib/services/db";
import jwt from "jsonwebtoken";
import { cookies } from "next/headers";
import { NextResponse } from "next/server";
import bcrypt from "bcrypt";

interface LoginRequestBody {
  email: string;
  password: string;
  recaptchaToken: string;
}

export async function POST(req: Request) {
  try {
    const { email, password, recaptchaToken }: LoginRequestBody =
      await req.json();

    // 1️⃣ Cek input awal
    if (!email?.trim() || !password?.trim()) {
      return NextResponse.json(
        { error: "Email dan password wajib diisi" },
        { status: 400 }
      );
    }

    // 2️⃣ Verifikasi reCAPTCHA
    const secretKey = process.env.RECAPTCHA_SECRET_KEY;
    const verifyRes = await fetch(
      `https://www.google.com/recaptcha/api/siteverify`,
      {
        method: "POST",
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
        body: `secret=${secretKey}&response=${recaptchaToken}`,
      }
    );
    const verifyData = await verifyRes.json();
    if (!verifyData.success || verifyData.score < 0.5) {
      return NextResponse.json(
        { error: "Verifikasi reCAPTCHA gagal" },
        { status: 400 }
      );
    }

    // 3️⃣ Cari user
    const result = await sql`
      SELECT id, email, password, level
      FROM users
      WHERE email = ${email}
      LIMIT 1
    `;
    const user = result[0];
    if (!user) {
      return NextResponse.json(
        { field: "email", error: "User tidak ditemukan" },
        { status: 404 }
      );
    }

    // 4️⃣ Cek password
    const validPassword = await bcrypt.compare(password, user.password);
    if (!validPassword) {
      return NextResponse.json(
        { field: "password", error: "Password salah" },
        { status: 401 }
      );
    }

    // 5️⃣ Buat token JWT
    const secret = process.env.JWT_SECRET;
    if (!secret) throw new Error("JWT_SECRET belum di-set di .env.local");

    const token = jwt.sign(
      { id: user.id, email: user.email, level: user.level },
      secret,
      { expiresIn: "1d" }
    );

    // 6️⃣ Simpan cookie
    const cookieStore = await cookies();
    cookieStore.set({
      name: "token",
      value: token,
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      path: "/",
      maxAge: 60 * 60 * 24,
      sameSite: "strict",
    });

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error("Login error:", error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : "Terjadi kesalahan" },
      { status: 500 }
    );
  }
}
